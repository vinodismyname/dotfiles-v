#!/usr/bin/env bash
#
# install - Main dotfiles installation script
#

# Base Setup
#---------------------------
set -euo pipefail

source "$( dirname "${BASH_SOURCE[0]}" )/../scripts/ui_components.sh"

# Parse Arguments
#---------------------------
DRY_RUN=false
VERBOSE=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    dry-run)
      DRY_RUN=true
      shift
      ;;
    verbose)
      VERBOSE=true
      shift
      ;;
    *)
      error_msg "Unknown argument: $1"
      exit 1
      ;;
  esac
done

# Ensure we're in the dotfiles directory
export DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
cd "$DOTFILES_DIR"

# ─────────────────────────────────────────────────────────────────────────────
# Welcome
# ─────────────────────────────────────────────────────────────────────────────

gum style \
  --border normal \
  --margin "1" \
  --padding "1" \
  --bold \
  --border-foreground "$PRIMARY" \
  "Dotfiles-V Setup"

gum style --bold "This script will:"
echo "1) Install or update basic dependencies."
echo "2) Prompt you for additional packages and configuration."
echo "3) Invoke Dotbot to link your dotfiles."
echo

if ! gum confirm --affirmative "Yes" --negative "No" "Shall we proceed?"; then
  warn_msg "Aborting install."
  exit 0
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Check for Homebrew, install if needed
# ─────────────────────────────────────────────────────────────────────────────

heading "Step 1: Checking Homebrew"

if ! command -v brew &>/dev/null; then
  run_with_spinner "Installing Homebrew..." -- sleep 1
  echo
  gum style --foreground "$DIM" "Homebrew not found. Installing now..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Add Homebrew to PATH for this session
  if [[ -f /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -f /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
  success_msg "Homebrew installed"
else
  success_msg "Homebrew already installed"
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Check for gum
# ─────────────────────────────────────────────────────────────────────────────

heading "Step 2: Ensuring Gum is Available"

if ! command -v gum &>/dev/null; then
  gum style --foreground "$DIM" "Gum not found. Installing via Homebrew..."
  if [ "$DRY_RUN" = false ]; then
    brew install gum
  else
    warn_msg "[DRY_RUN] brew install gum"
  fi
  success_msg "gum is installed"
else
  success_msg "gum is already installed"
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# OS Detection
# ─────────────────────────────────────────────────────────────────────────────

OS_NAME="$(uname -s | tr '[:upper:]' '[:lower:]')"
IS_MAC=false
IS_LINUX=false
IS_AMZN=false
HAS_NVIDIA=false

if command -v mwinit &>/dev/null; then
  IS_AMZN=true
fi

case "$OS_NAME" in
  darwin)
    IS_MAC=true
    ;;
  linux)
    IS_LINUX=true
    ;;
  *)
    error_msg "Unsupported OS: $OS_NAME"
    exit 1
    ;;
esac

# ─────────────────────────────────────────────────────────────────────────────
# Git submodules
# ─────────────────────────────────────────────────────────────────────────────

heading "Step 3: Updating Git Submodules"

run_with_spinner "Cloning submodules..." -- \
  bash -c "git submodule sync --quiet --recursive && git submodule update --init --recursive" &>/dev/null

success_msg "Git submodules updated"

divider

# ─────────────────────────────────────────────────────────────────────────────
# Platform-Specific Homebrew Installation
# ─────────────────────────────────────────────────────────────────────────────

heading "Step 4: Installing Platform-Specific Packages"

if [ "$IS_MAC" = true ]; then
  primary_msg "Installing macOS Homebrew Packages"
  BREWFILE_PATH="$DOTFILES_DIR/dependencies/mac.Brewfile"
  if [[ -f "$BREWFILE_PATH" ]]; then
    grun_with_spinner "brew bundle (mac)" -- \
      bash -c "[ \"$DRY_RUN\" = false ] && brew bundle --file=\"$BREWFILE_PATH\" || echo '[DRY_RUN] brew bundle --file=$BREWFILE_PATH'"
    success_msg "macOS brew bundle complete"
  else
    warn_msg "No mac.Brewfile found."
  fi
elif [ "$IS_LINUX" = true ]; then
  primary_msg "Installing Linux Homebrew Packages"
  BREWFILE_PATH="$DOTFILES_DIR/dependencies/linux.Brewfile"
  if [[ -f "$BREWFILE_PATH" ]]; then
    run_with_spinner "brew bundle (linux)" -- \
      bash -c "[ \"$DRY_RUN\" = false ] && brew bundle --file=\"$BREWFILE_PATH\" || echo '[DRY_RUN] brew bundle --file=$BREWFILE_PATH'"
    success_msg "Linux brew bundle complete"
  else
    warn_msg "No linux.Brewfile found."
  fi
  # Additional Linux-specific
  source "$DOTFILES_DIR/scripts/install_linux.sh" "$DRY_RUN"
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# GPU / NVIDIA detection
# ─────────────────────────────────────────────────────────────────────────────

if [ "$IS_LINUX" = true ] && sudo lshw 2>/dev/null | grep -i nvidia &>/dev/null; then
  HAS_NVIDIA=true
fi

if [ "$HAS_NVIDIA" = true ]; then
  if gum confirm "NVIDIA GPU detected. Install NVIDIA driver and CUDA?"; then
    if [ "$DRY_RUN" = false ]; then
      bash "$DOTFILES_DIR/scripts/nvidia.sh"
    else
      warn_msg "[DRY_RUN] Would run scripts/nvidia.sh"
    fi
  fi
else
  gum style --foreground "$DIM" "No NVIDIA GPU detected. Skipping NVIDIA setup."
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Docker Group
# ─────────────────────────────────────────────────────────────────────────────

if [ "$IS_LINUX" = true ] && gum confirm "Configure Docker group membership?"; then
  if [ "$DRY_RUN" = false ]; then
    sudo groupadd docker 2>/dev/null || true
    sudo usermod -aG docker "$USER"
    success_msg "Added $USER to 'docker' group (re-login may be required)."
  else
    warn_msg "[DRY_RUN] groupadd docker && usermod -aG docker $USER"
  fi
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# AWS CLI + Amazon environment
# ─────────────────────────────────────────────────────────────────────────────

if gum confirm "Install AWS CLI (and attempt Amazon environment setup if applicable)?"; then
  if [ "$IS_MAC" = true ]; then
    if [ "$DRY_RUN" = false ]; then
      brew install awscli
    else
      warn_msg "[DRY_RUN] brew install awscli"
    fi
  elif [ "$IS_LINUX" = true ]; then
    if command -v yum &>/dev/null; then
      if [ "$DRY_RUN" = false ]; then
        sudo yum install -y awscli
      else
        warn_msg "[DRY_RUN] sudo yum install -y awscli"
      fi
    fi
  fi

  # Amazon environment
  if command -v mwinit &>/dev/null; then
    primary_msg "Amazon environment detected."
    if [ "$DRY_RUN" = false ]; then
      bash "$DOTFILES_DIR/scripts/amazon_setup.sh"
    else
      warn_msg "[DRY_RUN] amazon_setup.sh"
    fi
  fi
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Rust
# ─────────────────────────────────────────────────────────────────────────────

if gum confirm "Install Rust via rustup?"; then
  if ! command -v rustc &>/dev/null; then
    if [ "$DRY_RUN" = false ]; then
      run_with_spinner "Installing Rust..." -- \
        bash -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
      success_msg "Rust installation completed"
    else
      warn_msg "[DRY_RUN] Would install Rust via rustup."
    fi
  else
    gum style --foreground "$DIM" "Rust is already installed."
  fi
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Dotbot
# ─────────────────────────────────────────────────────────────────────────────

heading "Step 5: Linking Dotfiles with Dotbot"

DOTBOT_BIN="$DOTFILES_DIR/dotbot/bin/dotbot"
if [ ! -x "$DOTBOT_BIN" ]; then
  DOTBOT_BIN="python3 $DOTFILES_DIR/dotbot/dotbot.py"
fi

CMD=("$DOTBOT_BIN" -d "$DOTFILES_DIR" -c "$DOTFILES_DIR/main/install.conf.yaml")
[ "$VERBOSE" = true ] && CMD+=(--verbose)

if [ "$DRY_RUN" = true ]; then
  CMD+=(--no-color --only link)
  warn_msg "[DRY_RUN] Would run dotbot with: ${CMD[*]}"
else
  run_with_spinner "Running Dotbot..." -- bash -c "${CMD[*]}"
fi

divider

# ─────────────────────────────────────────────────────────────────────────────
# Final Message
# ─────────────────────────────────────────────────────────────────────────────

gum style \
  --border normal \
  --margin "1" \
  --padding "1" \
  --border-foreground "$SUCCESS" \
  "✨ Done! Your dotfiles are linked. Enjoy your new setup!"
